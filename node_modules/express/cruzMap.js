
      // This example creates circles on the map, representing populations in North
      // America.

      // First, create an object containing LatLng and population for each city.
      var fBase = new Firebase("https://glowing-inferno-6337.firebaseio.com/");
      var node = fBase.child("Tweets/Cruz");
      var flag = false;
      var information = {};
      var map;
      var negative =0;
      var positive = 0;
      var neutral = 0; 
      /*
	   * Create the chart here
	   */
	  var data = [
	  {
	   value:negative,
	   color:"#f7464a",
	   label:"Negative",
	   highlight:"#ff5a5e"
		},
	  {
	   value:positive,
	   color:"#009933",
	   highlight:'#80ffaa',
	   label:"Positive",
	  },
	  {
	   value:neutral,
	   color:"#cc6600",
	   highlight:"#ffbf80",
	   label:"Neutral"
	  }
		  ];
	  options = {
		        //Boolean - Show a backdrop to the scale label
		        scaleShowLabelBackdrop: true,
		        //String - The colour of the label backdrop
		        scaleBackdropColor: "rgba(255,255,255,0.75)",
		        // Boolean - Whether the scale should begin at zero
		        scaleBeginAtZero: true,
		        //Number - The backdrop padding above & below the label in pixels
		        scaleBackdropPaddingY: 2,
		        //Number - The backdrop padding to the side of the label in pixels
		        scaleBackdropPaddingX: 2,
		        //Boolean - Show line for each value in the scale
		        scaleShowLine: true,
		        //Boolean - Stroke a line around each segment in the chart
		        segmentShowStroke: true,
		        //String - The colour of the stroke on each segement.
		        segmentStrokeColor: "#fff",
		        //Number - The width of the stroke value in pixels
		        segmentStrokeWidth: 2,
		        //Number - Amount of animation steps
		        animationSteps: 100,
		        //String - Animation easing effect.
		        animationEasing: "easeOutBounce",
		        //Boolean - Whether to animate the rotation of the chart
		        animateRotate: true,
		        //Boolean - Whether to animate scaling the chart from the centre
		        animateScale: false,
		        //String - A legend template
		        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"

		    };
	  
	  var map;
	  var ctx = $("#myChart").get(0).getContext("2d");
	  var pie = new Chart(ctx).Pie(data,options);
	  map = new jvm.Map({

            map: 'world_mill',
            markerStyle: {
               initial: {
                 fill: 'red'
                 }
           },
	   onMarkerTipShow: function(e, label, code) {
			label.html('<div style="padding: 25px 15px 15px; position: relative; background-color: black;"><p class="lead">'+label.html()+'</p></div>');
		},
           container: $('#map')});
      /*function initMap() {
        // Create the mahttp://stackoverflow.com/questions/3559070/are-there-dictionaries-in-javascript-like-pythonp.
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 4,
          center: {lat: 37.090, lng: -95.712},
          mapTypeId: google.maps.MapTypeId.TERRAIN
        });
*/	var markerIndex = 0;
        node.on("child_added",function(snapshot,prevChildKey){
          var newInfo = snapshot.val();
          var latitude = newInfo.long;
          var long = newInfo.lat;
          var feeling = newInfo.attitude;
	  var who = newInfo.who;
          var color = '#ff0000';
	  
          if(feeling==="Negative"){
            color='#ff0000';
            negative++;
          }
          else if(feeling ==="Positive"){
            color = "#1aff1a";
            positive++;
          }
          else{
            color = "#ffb366";
            neutral++;
          }
          pie.segments[0].value = negative;
          pie.segments[1].value = positive;
          pie.segments[2].value = neutral;
          pie.update();
	  map.addMarker(markerIndex, {latLng: [latitude, long], style: {fill: color}, name: newInfo.tweet});
	  markerIndex += 1;
});         
/* var newCircle = new google.maps.Circle({
            fillColor: color,
            strokeColor:color,
            strokeOpacity: .9,
            strokeWeight: 2,
			clickable: true,
            fillOpacity: 0.7,
            map: map,
            center: {lat:latitude,lng:long},
            radius: 10000

          });
		    var contentWindow = '<div id="content" style="color:black">'+
		'<div id="siteNotice">'+
		'</div>'+
		'<h3 id="firstHeading" class="firstHeading">'+ who.charAt(0).toUpperCase() + who.slice(1) + '</h3>'+
		'<div id="bodyContent">'+
		'<p><b>'+ newInfo.tweet+ '</b>'
		'</div>'+
		'</div>';
	var infoWindow= new google.maps.InfoWindow({
		content: contentWindow
    });
	google.maps.event.addListener(newCircle, 'click', function(ev){
    	infoWindow.setPosition(ev.latLng);
		infoWindow.open(map);
	});
	}
          console.log(latitude);
          console.log(long);
        }); 
} */


        // Construct the circle for each value in citymap.
        // Note: We scale the area of the circle based on the population.
